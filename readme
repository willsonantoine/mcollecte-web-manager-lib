# Mcollect Web Manager Lib (`mcollecte-web-manager-lib`)

[![npm version](https://badge.fury.io/js/mcollecte-web-manager-lib.svg)](https://badge.fury.io/js/mcollecte-web-manager-lib)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Une bibliothèque TypeScript pour interagir avec l'API publique du système Mcollecte. Cette bibliothèque fournit des méthodes pratiques pour récupérer les informations du site, les articles de blog, les catégories, et les blocs de contenu utilisés dans les sites alimentés par Mcollecte.

## Fonctionnalités

- Récupération des informations générales du site web.
- Récupération de la liste des catégories de blog.
- Récupération des articles de blog (tous ou par catégorie).
- Récupération d’un article de blog via son URL (slug), avec les articles similaires.
- Récupération de blocs de contenu personnalisés (blocs).
- Consultation d’un bloc spécifique via son ID (après initialisation).
- Réponses typées avec TypeScript.

## Installation

```bash
npm install mcollecte-web-manager-lib
```

ou

```bash
yarn add mcollecte-web-manager-lib
```

## Configuration
Voici comment configurer votre mcollect-web-manager-lin
```ts
    const url = "http://localhost:2006";
    const site_token = "29952c36-191d-405a-937d-cf31593123b7";
    const cls = new McollectWebManagerLib({ api_url: url, site_token: site_token });
```
Le api url c'est l'url source de votre api
Le site_token est le token d'indentification de votre site web dans la partie admin mcollecte 

Dans votre fichier .env 
```env
URL_API=http://localhost:2006
SITE_TOKEN=29952c36-191d-405a-937d-cf31593123b7
```

## Utilisation

```ts
import McollectWebManagerLib from 'mcollecte-web-manager-lib';


// --- Example Usage (using async IIFE) ---
export const Test = async () => {
    const url = "http://localhost:2006";
    const site_token = "29952c36-191d-405a-937d-cf31593123b7"; // from web manager https://app.mcollecte.com
    const cls = new McollectWebManagerLib({ api_url: url, site_token: site_token });

    try {
        // Initialize if your methods depend on pre-loaded data (like getBlocById might)
        // await cls.initialize(); // Uncomment if needed

        // --- Test Get Blog by URL ---
        const blogsCategory = await cls.getBlogsCategory();
        console.log('All blogsCategory :: ', blogsCategory);
        const blogs = await cls.getBlogs();
        console.log('All blogs :: ', blogs);
        const blogUrlSlug = 'je-suis-le-premier-blog';
        console.log(`\nFetching blog by URL: ${blogUrlSlug}...`);
        const blogDetail = await cls.getBlogByUrl(blogUrlSlug);
        console.log('Blog found by URL:', blogDetail.blog.title);
        console.log('Favorite Blogs Count in same category:', blogDetail.favoritBlogs.count);
        if (blogDetail.favoritBlogs.rows.length > 0) {
            console.log('First favorite blog title:', blogDetail.favoritBlogs.rows[0].title);
        }

        // --- Test Get Blogs by Category ---
        const categoryIdToTest = '7331361b-8990-43d6-9db8-b73aaadd18de'; // Example category ID
        console.log(`\nFetching blogs for category ID: ${categoryIdToTest}...`);
        const blogsInCategory = await cls.getBlogsByCategory(categoryIdToTest);
        console.log(`Found ${blogsInCategory.count} blog(s) in category ${categoryIdToTest}.`);
        if (blogsInCategory.rows.length > 0) {
            console.log('First blog title in category:', blogsInCategory.rows[0].title);
            // You could loop through blogsInCategory.rows here
        }

    } catch (error) {
        // console.error("\n--- An error occurred during testing ---:", error);
    }
}
```

Pour envoyer un message via un formulaire de contact voici l'exemple de code:
```ts
 // ----- Test send message
        await cls.createContactMessage({
            email: 'monemail@gmail.com',
            message: "message",
            name: 'mon_nom',
            sujet: 'suject'
        })

``` 

## API

| Méthode | Description |
|--------|-------------|
| `initialize()` | Prépare la bibliothèque (nécessaire pour certains appels comme `getBlocById`). |
| `getWebInfo()` | Récupère les informations du site. |
| `getBlogsCategory()` | Récupère les catégories de blog disponibles. |
| `getBlogs()` | Récupère les blogs publiés. |
| `getBlogByUrl(blogUrl: string)` | Récupère un blog via son slug + suggestions. |
| `getBlogsByCategory(categoryId: string)` | Blogs d'une catégorie spécifique. |
| `getBlocById(id: string)` | Récupère un bloc via son ID. Nécessite `initialize()`. |
| `createContactMessage`| Création du message via le formulaire de contact |

## Types TypeScript fournis

- `ISiteInfos`
- `IBlogCategoryResponse`
- `BlogPost`
- `BlogApiResponse`
- `BlogByUrlResponse`
- `BlocItem`
- `BlocApiResponse`
- `CategoryDetail`
- `BlocText`
- `IContactMessage`

Import exemple :

```ts
import { BlocText } from "mcollecte-web-manager-lib";  
```

---

## À propos du concepteur

Ce projet a été conçu et développé par **Willson Vulembere Antoine**, ingénieur en informatique passionné par les technologies communautaires, l'agriculture et les systèmes numériques durables. Willson est spécialisé dans le développement backend, les architectures distribuées, et la conception de solutions technologiques pour des environnements à faible connectivité.

GitHub : [@willsonantoine](https://github.com/willsonantoine)  
Projet : [mcollecte-web-manager-lib](https://github.com/willsonantoine/mcollecte-web-manager-lib)

---

## Licence

Ce projet est sous licence [MIT](https://opensource.org/licenses/MIT) – vous pouvez l’utiliser librement dans vos projets personnels ou commerciaux.
